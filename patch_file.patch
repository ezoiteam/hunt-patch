diff -uNr orig/hunt/hunt.c hunt/hunt/hunt.c
--- orig/hunt/hunt.c	2018-04-13 18:10:32.939979900 +0800
+++ hunt/hunt/hunt.c	2018-04-13 18:19:49.421020600 +0800
@@ -394,7 +394,7 @@
 
 	vec_cnt = 0;
 	for (ip = ifp; ip; ip = ip->ifa_next)
-		if (ip->ifa_addr &&
+		if ((ip->ifa_broadaddr != NULL) &&
 		    (ip->ifa_addr->sa_family == AF_INET) &&
 		    (ip->ifa_flags & IFF_BROADCAST))
 			vec_cnt++;
@@ -406,7 +406,7 @@
 
 	vec_cnt = 0;
 	for (ip = ifp; ip; ip = ip->ifa_next)
-		if (ip->ifa_addr &&
+		if ((ip->ifa_broadaddr != NULL) &&
 		    (ip->ifa_addr->sa_family == AF_INET) &&
 		    (ip->ifa_flags & IFF_BROADCAST))
 			memcpy(&(*vector)[vec_cnt++], ip->ifa_broadaddr,
diff -uNr orig/hunt/otto.c hunt/hunt/otto.c
--- orig/hunt/otto.c	2018-04-13 18:10:32.939979900 +0800
+++ hunt/hunt/otto.c	2018-04-13 18:28:05.353646500 +0800
@@ -55,6 +55,7 @@
 # include	<stdlib.h>
 # include	<unistd.h>
 # include	"hunt.h"
+# include	"../patch.h"
 
 # undef		WALL
 # undef		NORTH
diff -uNr orig/patch.h hunt/patch.h
--- orig/patch.h	1970-01-01 08:00:00.000000000 +0800
+++ hunt/patch.h	2018-04-13 18:19:49.406037800 +0800
@@ -0,0 +1,125 @@
+#include <signal.h>
+
+/*	sysdeps/generic/sigset-cvt-mask.h	*/
+static inline int __attribute__ ((unused))
+	sigset_set_old_mask(sigset_t *, int);
+static inline int __attribute__ ((unused))
+	sigset_get_old_mask(const sigset_t *);
+/*	sysdeps/posix/sigblock.c	*/
+int __sigblock(int);
+/*	sysdeps/posix/sigsetmask.c	*/
+int __sigsetmask(int);
+
+/*	include/libc-symbols.h	*/
+/* Define ALIASNAME as a weak alias for NAME.
+   If weak aliases are not available, this defines a strong alias.  */
+# define weak_alias(name, aliasname) _weak_alias (name, aliasname)
+# define _weak_alias(name, aliasname) \
+  extern __typeof (name) aliasname __attribute__ ((weak, alias (#name)));
+
+/*	signal/signal.h	*/
+/* Compute mask for signal SIG.  */
+# define sigmask(sig) ((int)(1u << ((sig) - 1)))
+
+/*	sysdeps/generic/sigsetops.h	*/
+#define __sigemptyset(set)			\
+  (__extension__ ({				\
+    *(set) = (__sigset_t) 0;			\
+    0;  					\
+  }))
+
+/* These macros needn't check for a bogus signal number;
+   checking is done in the non-__ versions.  */
+# define __sigismember(set, sig)		\
+  (__extension__ ({				\
+    __sigset_t __mask = sigmask (sig);  	\
+    (*(set) & __mask) ? 1 : 0;			\
+  }))
+
+# define __sigaddset(set, sig)			\
+  (__extension__ ({				\
+    __sigset_t __mask = sigmask (sig);  	\
+    *(set) |= __mask;				\
+    0;  					\
+  }))
+
+/*	sysdeps/generic/sigset-cvt-mask.h	*/
+/* Convert between an old-style 32-bit signal mask and a POSIX sigset_t.  */
+
+/* Perform *SET = MASK.  Unused bits of *SET are set to 0.
+   Returns zero for success or -1 for errors (from sigaddset/sigemptyset).  */
+static inline int __attribute__ ((unused))
+sigset_set_old_mask (sigset_t *set, int mask)
+{
+  if (sizeof (__sigset_t) == sizeof (unsigned int))
+    *set = (unsigned int) mask;
+  else
+    {
+      unsigned int __sig;
+
+      if (__sigemptyset (set) < 0)
+	return -1;
+
+      for (__sig = 1; __sig < NSIG && __sig <= sizeof (mask) * 8; __sig++)
+	if (mask & sigmask (__sig))
+	  if (__sigaddset (set, __sig) < 0)
+	    return -1;
+    }
+  return 0;
+}
+
+/* Return the sigmask corresponding to *SET.
+   Unused bits of *SET are thrown away.  */
+static inline int __attribute__ ((unused))
+sigset_get_old_mask (const sigset_t *set)
+{
+  if (sizeof (sigset_t) == sizeof (unsigned int))
+    return (unsigned int) *set;
+  else
+    {
+      unsigned int mask = 0;
+      unsigned int sig;
+
+      for (sig = 1; sig < NSIG && sig <= sizeof (mask) * 8; sig++)
+	if (__sigismember (set, sig))
+	  mask |= sigmask (sig);
+
+      return mask;
+    }
+}
+
+/*	sysdeps/posix/sigblock.c	*/
+/* Block signals in MASK, returning the old mask.  */
+int
+__sigblock (int mask)
+{
+  sigset_t set, oset;
+
+  if (sigset_set_old_mask (&set, mask) < 0)
+    return -1;
+
+  if (sigprocmask (SIG_BLOCK, &set, &oset) < 0)
+    return -1;
+
+  return sigset_get_old_mask (&oset);
+}
+
+weak_alias (__sigblock, sigblock)
+
+/*	sysdeps/posix/sigsetmask.c	*/
+/* Set the mask of blocked signals to MASK, returning the old mask.  */
+int
+__sigsetmask (int mask)
+{
+  sigset_t set, oset;
+
+  if (sigset_set_old_mask (&set, mask) < 0)
+    return -1;
+
+  if (sigprocmask (SIG_SETMASK, &set, &oset) < 0)
+    return -1;
+
+  return sigset_get_old_mask (&oset);
+}
+
+weak_alias (__sigsetmask, sigsetmask)
